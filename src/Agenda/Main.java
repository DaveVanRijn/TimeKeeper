/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Agenda;

import java.awt.TrayIcon;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import TimeKeeper.Keeper;

/**
 *
 * @author Dave van Rijn, Student 500714558, Klas IS202
 */
public class Main extends javax.swing.JFrame {

    private static Main mainframe;
    private List<User> users;
    private User loggedUser;
    private static final SimpleDateFormat dateForm = new SimpleDateFormat("dd/MM/yyyy");

    /**
     * Creates new form Agenda
     */
    public Main() {
        initComponents();
    }
    
    public static String getDateString(Date date){
        return dateForm.format(date);
    }
    
    public static String getDateString(Calendar cal){
        return Main.getDateString(cal.getTime());
    }
    
    public static Date getDate(Calendar cal) throws ParseException{
        return dateForm.parse(getDateString(cal));
    }
    
    public Date getDate(String date) throws ParseException{
        return dateForm.parse(date);
    }

    public static void showNotifications(User user) {
        try {
            List<Meeting> notifies = new ArrayList<>();
            Calendar cal = Calendar.getInstance();
            Date date = dateForm.parse(getDateString(cal));
            List<Meeting> list = user.getAgenda().getMeetings().get(cal.get(Calendar.YEAR));
            for (Meeting m : list) {
                if (m.getNotify() != null && m.getNotify().equals(date) && !m.isNotified()) {
                    notifies.add(m);
                    m.setNotified(true);
                }
            }
            if (notifies.size() == 1) {
                Meeting m = notifies.get(0);
                Keeper.showMessage(m.getTitle() + " op "
                        + dateForm.format(m.getStart()) + ".",
                        TrayIcon.MessageType.INFO);
            } else if (notifies.size() > 1) {
                Keeper.showMessage("Je heb meerdere herinneringen voor "
                        + "afspraken vandaag. Open de app om deze te bekijken.",
                        TrayIcon.MessageType.INFO);
            }
        } catch (ParseException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static String encrypt(String decrypted) throws CharNotSupportedException{
        return new EncryptionKey().encrypt(decrypted);
    }
    
    public static String decrypt(String encrypted) throws CharNotSupportedException{
        return new EncryptionKey().decrypt(encrypted);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
